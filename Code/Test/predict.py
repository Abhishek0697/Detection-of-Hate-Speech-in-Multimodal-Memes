import csv


def predict(image_model, text_model, fusion_model, test_dataloader, device):
    
    image_model.eval()
    text_model.eval()
    fusion_model.eval()
    
    inverse_dict = inverse_prime_dict(prime_dict) 


    with open('output.csv',mode='w') as output_file:
        
        f=csv.writer(output_file,delimiter=',')
        f.writerow(['id','proba', 'label'])


        for batch_num, (feats, captions, input_ids, attention_masks, input_ids_cap, attention_masks_cap, image_names) in                     enumerate(test_dataloader):
        
            feats = feats.to(device)
            input_ids, attention_masks = input_ids.to(device), attention_masks.to(device)
            input_ids_cap, attention_masks_cap = input_ids_cap.to(device), attention_masks_cap.to(device)


            
            
            '''
            Compute ResNet Features
            '''
            out, image_features = image_model(feats) 

            
            '''
            Compute BERT Features for true captions
            '''
            output_dictionary = text_model(input_ids, 
                                           token_type_ids=None, 
                                           attention_mask=attention_masks, 
                                           labels=target,
                                           return_dict = True)

            text_features = output_dictionary.hidden_states[12][:,0,:]


            '''
            Compute BERT Features for captions generated by Image Captioning Model
            '''
            output_dictionary_captioning = text_model(input_ids_cap, 
                                           token_type_ids=None, 
                                           attention_mask=attention_masks_cap, 
                                           labels=target,
                                           return_dict = True)

            captioning_features = output_dictionary_captioning.hidden_states[12][:,0,:]



            '''
            Compute Classification Output and loss from Fusion model
            '''
            output = fusion_model(text_features, image_features, captioning_features)



            '''
            Prediction and Probabilities of Hatefulness
            '''

            predictions = F.softmax(output, dim=1)

            proba = predictions.detach().cpu().numpy()

            _, top1_pred_labels = torch.max(predictions,1)
            top1_pred_labels.view(-1)
                        

                
            for index,name in enumerate(list(image_names)):
                f.writerow([str(name), proba[index][1], int(list(top1_pred_labels)[index].item())])
            
            
            
